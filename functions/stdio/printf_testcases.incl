    TESTPRINT( 4, "%hhd", CHAR_MIN );
    TESTPRINT( 3, "%hhd", CHAR_MAX );
    TESTPRINT( 1, "%hhd", 0 );
    TESTPRINT( 6, "%hd", SHRT_MIN );
    TESTPRINT( 5, "%hd", SHRT_MAX );
    TESTPRINT( 1, "%hd", 0 );
    TESTPRINT( 11, "%d", INT_MIN );
    TESTPRINT( 10, "%d", INT_MAX );
    TESTPRINT( 1, "%d", 0 );
    TESTPRINT( 11, "%ld", LONG_MIN );
    TESTPRINT( 10, "%ld", LONG_MAX );
    TESTPRINT( 1, "%ld", 0l );
    TESTPRINT( 20, "%lld", LLONG_MIN );
    TESTPRINT( 19, "%lld", LLONG_MAX );
    TESTPRINT(  100, "%lld", 0ll ) );
    TESTPRINT( 3, "%hhu", UCHAR_MAX );
    TESTPRINT( 3, "%hhu", (unsigned char)-1 );
    TESTPRINT( 5, "%hu", USHRT_MAX );
    TESTPRINT( 5, "%hu", (unsigned short)-1 );
    TESTPRINT( 10, "%u", UINT_MAX );
    TESTPRINT( 10, "%u", -1u );
    TESTPRINT( 10, "%lu", ULONG_MAX );
    TESTPRINT( 10, "%lu", -1ul );
    TESTPRINT( 20, "%llu", ULLONG_MAX );
    TESTPRINT( 20, "%llu", -1ull );
    TESTPRINT( 8, "%X", UINT_MAX );
    TESTPRINT( 10, "%#X", -1u );
    TESTPRINT( 8, "%x", UINT_MAX );
    TESTPRINT( 10, "%#x", -1u );
    TESTPRINT( 11, "%o", UINT_MAX );
    TESTPRINT( 12, "%#o", -1u );
    /* TODO: TESTPRINT( 5, "%.0#o", 0 ); */
    TESTPRINT( 11, "%+d", INT_MIN );
    TESTPRINT( 11, "%+d", INT_MAX );
    TESTPRINT( 2, "%+d", 0 );
    TESTPRINT( 10, "%+u", UINT_MAX );
    TESTPRINT( 10, "%+u", -1u );
    TESTPRINT( 11, "% d", INT_MIN );
    TESTPRINT( 11, "% d", INT_MAX );
    TESTPRINT( 2, "% d", 0 );
    TESTPRINT( 10, "% u", UINT_MAX );
    TESTPRINT( 10, "% u", -1u );
    TESTPRINT( 11, "%9d", INT_MIN );
    TESTPRINT( 10, "%9d", INT_MAX );
    TESTPRINT( 11, "%10d", INT_MIN );
    TESTPRINT( 10, "%10d", INT_MAX );
    TESTPRINT( 11, "%11d", INT_MIN );
    TESTPRINT( 11, "%11d", INT_MAX );
    TESTPRINT( 12, "%12d", INT_MIN );
    TESTPRINT( 12, "%12d", INT_MAX );
    TESTPRINT( 11, "%-9d", INT_MIN );
    TESTPRINT( 10, "%-9d", INT_MAX );
    TESTPRINT( 11, "%-10d", INT_MIN );
    TESTPRINT( 10, "%-10d", INT_MAX );
    TESTPRINT( 11, "%-11d", INT_MIN );
    TESTPRINT( 11, "%-11d", INT_MAX );
    TESTPRINT( 12, "%-12d", INT_MIN );
    TESTPRINT( 12, "%-12d", INT_MAX );
    TESTPRINT( 11, "%09d", INT_MIN );
    TESTPRINT( 10, "%09d", INT_MAX );
    TESTPRINT( 11, "%010d", INT_MIN );
    TESTPRINT( 10, "%010d", INT_MAX );
    TESTPRINT( 11, "%011d", INT_MIN );
    TESTPRINT( 11, "%011d", INT_MAX );
    TESTPRINT( 12, "%012d", INT_MIN );
    TESTPRINT( 12, "%012d", INT_MAX );
    TESTPRINT( 11, "%-09d", INT_MIN );
    TESTPRINT( 10, "%-09d", INT_MAX );
    TESTPRINT( 11, "%-010d", INT_MIN );
    TESTPRINT( 10, "%-010d", INT_MAX );
    TESTPRINT( 11, "%-011d", INT_MIN );
    TESTPRINT( 11, "%-011d", INT_MAX );
    TESTPRINT( 12, "%-012d", INT_MIN );
    TESTPRINT( 12, "%-012d", INT_MAX );
    TESTPRINT( 30, "%030.20d", INT_MAX );
    TESTPRINT( 8, "%.6x", UINT_MAX );
    TESTPRINT( 10, "%#6.3x", UINT_MAX );
    TESTPRINT( 10, "%#3.6x", UINT_MAX );
    TESTPRINT( 11, "%.6d", INT_MIN );
    TESTPRINT( 11, "%6.3d", INT_MIN );
    TESTPRINT( 11, "%3.6d", INT_MIN );
    TESTPRINT( 10, "%#0.6x", UINT_MAX );
    TESTPRINT( 10, "%#06.3x", UINT_MAX );
    TESTPRINT( 10, "%#03.6x", UINT_MAX );
    TESTPRINT( 10, "%#0.6d", INT_MAX );
    TESTPRINT( 10, "%#06.3d", INT_MAX );
    TESTPRINT( 10, "%#03.6d", INT_MAX );
    TESTPRINT( 11, "%#+.6d", INT_MAX );
    TESTPRINT( 11, "%#+6.3d", INT_MAX );
    TESTPRINT( 11, "%#+3.6d", INT_MAX );
    TESTPRINT( 11, "%+0.6d", INT_MAX );
    TESTPRINT( 11, "%+06.3d", INT_MAX );
    TESTPRINT( 11, "%+03.6d", INT_MAX );
    TESTPRINT( 12, "- %d", INT_MAX );
    TESTPRINT( 26, "- %d %% %d", INT_MAX, INT_MIN );
    TESTPRINT( 1, "%c", 'x' );
    TESTPRINT( 6, "%s", "abcdef" );
    TESTPRINT( 10, "%p", (void *)0xdeadbeef );
    {
    int val1, val2;
    TESTPRINT( 9, "123456%n789%n", &val1, &val2 );
    TESTCASE( val1 == 6 );
    TESTCASE( val2 == 9 );
    }
    // 985 bytes from buffer
    TESTCASE( memcmp( read "-1281270-32768327670-214748364821474836470-214748364821474836470-922337203685477580892233720368547758070255255655356553542949672954294967295429496729542949672951844674407370955161518446744073709551615FFFFFFFF0XFFFFFFFFffffffff0xffffffff37777777777037777777777-2147483648+2147483647+042949672954294967295-2147483648 2147483647 042949672954294967295-21474836482147483647-21474836482147483647-2147483648 2147483647 -2147483648  2147483647-21474836482147483647-21474836482147483647-21474836482147483647 -2147483648 2147483647  -21474836482147483647-21474836482147483647-214748364802147483647-02147483648002147483647-21474836482147483647-21474836482147483647-21474836482147483647 -2147483648 2147483647            00000000002147483647ffffffff0xffffffff0xffffffff-2147483648-2147483648-21474836480xffffffff0xffffffff0xffffffff214748364721474836472147483647+2147483647+2147483647+2147483647+2147483647+2147483647+2147483647- 2147483647- 2147483647 % -2147483648xabcdef0xdeadbeef123456789", 985 ) == 0 );
